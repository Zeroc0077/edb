// EDB - Ethereum Debugger
// Copyright (C) 2024 Zhuo Zhang and Wuqi Zhang
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Unicode icons and symbols for visual enhancement
//!
//! This module provides a comprehensive set of Unicode symbols and icons
//! used throughout the TUI for visual appeal and clarity.

/// Collection of Unicode icons used throughout the TUI
#[derive(Debug, Clone)]
pub struct Icons;

impl Icons {
    // Status indicators
    /// Icon for successful operations and completed actions
    pub const SUCCESS: &'static str = "‚úÖ";
    /// Icon for errors and failed operations
    pub const ERROR: &'static str = "‚ùå";
    /// Icon for warnings and caution messages
    pub const WARNING: &'static str = "‚ö†Ô∏è";
    /// Icon for informational messages
    pub const INFO: &'static str = "‚ÑπÔ∏è";
    /// Icon for ongoing processing and loading states
    pub const PROCESSING: &'static str = "üîÑ";

    // Execution states
    /// Icon for function or contract calls in transaction traces
    pub const CALL: &'static str = "üìû";
    /// Icon for function returns in transaction traces
    pub const RETURN: &'static str = "‚Ü©Ô∏è";
    /// Icon for transaction reverts and failed operations
    pub const REVERT: &'static str = "‚ùå";
    /// Icon for contract creation operations
    pub const CREATE: &'static str = "üèóÔ∏è";
    /// Icon indicating the current execution position
    pub const CURRENT_EXECUTION: &'static str = "üî∏";
    /// Icon for breakpoints in the debugger
    pub const BREAKPOINT: &'static str = "üîπ";
    /// Icon indicating when a target execution point is reached
    pub const TARGET_REACHED: &'static str = "üéØ";

    // File and code
    /// Icon for individual source files
    pub const FILE: &'static str = "üìÑ";
    /// Icon for directories and folders
    pub const FOLDER: &'static str = "üìÅ";
    /// Icon for compiled code and bytecode
    pub const CODE: &'static str = "üíæ";
    /// Icon for functions and methods
    pub const FUNCTION: &'static str = "‚öôÔ∏è";
    /// Icon for variables and storage items
    pub const VARIABLE: &'static str = "üìä";
    /// Icon for mappings and key-value structures
    pub const MAPPING: &'static str = "üìà";

    // Connection states
    /// Icon for established RPC connections
    pub const CONNECTED: &'static str = "üîó";
    /// Icon for disconnected or failed connections
    pub const DISCONNECTED: &'static str = "üíî";
    /// Icon for connection attempts in progress
    pub const CONNECTING: &'static str = "üîÑ";

    // Navigation
    /// Up arrow for navigation and scrolling
    pub const ARROW_UP: &'static str = "‚Üë";
    /// Down arrow for navigation and scrolling
    pub const ARROW_DOWN: &'static str = "‚Üì";
    /// Left arrow for navigation and hierarchy
    pub const ARROW_LEFT: &'static str = "‚Üê";
    /// Right arrow for navigation and hierarchy
    pub const ARROW_RIGHT: &'static str = "‚Üí";
    /// Indicator for the current line in code view
    pub const CURRENT_LINE: &'static str = "‚ñ∫";

    // Box drawing characters for elegant borders
    /// Top-left corner character for rounded boxes
    pub const BOX_TOP_LEFT: &'static str = "‚ï≠";
    /// Top-right corner character for rounded boxes
    pub const BOX_TOP_RIGHT: &'static str = "‚ïÆ";
    /// Bottom-left corner character for rounded boxes
    pub const BOX_BOTTOM_LEFT: &'static str = "‚ï∞";
    /// Bottom-right corner character for rounded boxes
    pub const BOX_BOTTOM_RIGHT: &'static str = "‚ïØ";
    /// Horizontal line character for box borders
    pub const BOX_HORIZONTAL: &'static str = "‚îÄ";
    /// Vertical line character for box borders
    pub const BOX_VERTICAL: &'static str = "‚îÇ";

    // Tree characters for hierarchical displays
    /// Tree branch character for intermediate items
    pub const TREE_BRANCH: &'static str = "‚îú‚îÄ";
    /// Tree branch character for the last item in a group
    pub const TREE_LAST_BRANCH: &'static str = "‚îî‚îÄ";
    /// Vertical line character for tree structure continuation
    pub const TREE_VERTICAL: &'static str = "‚îÇ";
    /// Nested branch character for hierarchical structures
    pub const TREE_NESTED_BRANCH: &'static str = "‚îå‚îÄ";

    // Activity indicators (animated)
    /// Animation frames for the loading spinner
    pub const SPINNER_FRAMES: &'static [&'static str] =
        &["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"];

    // Progress bars
    /// Full block character for completed progress sections
    pub const PROGRESS_FULL: &'static str = "‚ñà";
    /// Empty block character for incomplete progress sections
    pub const PROGRESS_EMPTY: &'static str = "‚ñë";
    /// Partial block characters for fractional progress display
    pub const PROGRESS_PARTIAL: &'static [&'static str] = &["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"];

    // Special characters
    /// Bullet point character for lists and emphasis
    pub const BULLET: &'static str = "‚Ä¢";
    /// Diamond character for special markers
    pub const DIAMOND: &'static str = "‚óÜ";
    /// Filled circle character for active states
    pub const CIRCLE: &'static str = "‚óè";
    /// Empty circle character for inactive states
    pub const CIRCLE_EMPTY: &'static str = "‚óã";
    /// Filled square character for solid indicators
    pub const SQUARE: &'static str = "‚ñ†";
    /// Empty square character for outline indicators
    pub const SQUARE_EMPTY: &'static str = "‚ñ°";

    // Expand/collapse indicators
    /// Down arrow indicating an expanded section
    pub const EXPANDED: &'static str = "‚ñº";
    /// Right arrow indicating a collapsed section
    pub const COLLAPSED: &'static str = "‚ñ∫";
    /// Plus sign indicator for expandable content
    pub const EXPANDABLE: &'static str = "[+]";
    /// Minus sign indicator for collapsible content
    pub const COLLAPSIBLE: &'static str = "[-]";
}
